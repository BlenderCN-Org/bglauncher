#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0b4 on Sun Mar 18 21:08:41 2018
#

import wx
import pathlib2
import subprocess
from pprint import pprint, pformat
from ast import literal_eval as litev

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

Config = {}
sizes_window = ( (640, 480), (800, 600), (1024, 768), (1280, 720), (1366, 768), (1920, 1080) )
sizes_fullscreen = ( (0, 0), (640, 480), (800, 600), (1024, 768), (1280, 720), (1366, 768), (1920, 1080) )
stereo_modes = ( "nostereo", "anaglyph", "sidebyside", "syncdoubling", "3dtvtopbottom", "interlace", "vinterlace", "hwpageflip" )
bit_depths = ( 16, 24, 32 )
refresh_rates = ( 30, 45, 60, 75, 90, 120 )

try:
	with open('Settings.cfg', 'r') as openedfile:
		
		Config = litev( openedfile.read() )
		pprint( 'Settings loaded from ' + openedfile.name )
		
except:
	pprint( 'Couldnt open Settings.cfg, using defaults' )
	Config = { 'videomode' : 0, 'stereomode' : 0, 'nomipmap' : 0, 'fixedtime' : 0, 'sizewindow' : 2, 'sizefullscreen' : 0, 'bitdepth' : 2, 'refreshrate' : 2, 'pathplayer' : 'engine/blenderplayer.exe', 'pathfile' : 'data/main.blend' }

class MyFrame(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyFrame.__init__
		kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_TOOL_WINDOW
		wx.Frame.__init__(self, *args, **kwds)
		self.MainNotebook = wx.Notebook(self, wx.ID_ANY, style=0)
		self.TabGeneral = wx.Panel(self.MainNotebook, wx.ID_ANY)
		self.ComboStereoMode = wx.ComboBox(self.TabGeneral, wx.ID_ANY, choices=["No Stereo", "Anaglyph", "Side By Side", "Sync Doubling", "3D TV Top Bottom", "Interlace", "Vinterlace", "HW Page Flip"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
		self.RadioVideoMode = wx.RadioBox(self.TabGeneral, wx.ID_ANY, "Video Mode", choices=["Windowed", "Fullscreen"], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
		self.CheckMipmap = wx.CheckBox(self.TabGeneral, wx.ID_ANY, "Disable Mipmaps")
		self.CheckFixedTime = wx.CheckBox(self.TabGeneral, wx.ID_ANY, "Fixed Time")
		self.TabWindowMode = wx.Panel(self.MainNotebook, wx.ID_ANY)
		self.ComboWindowSize = wx.ComboBox(self.TabWindowMode, wx.ID_ANY, choices=["640x480", "800x600", "1024x768", "1280x720", "1366x768", "1920x1080"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
		self.TabFullscreenMode = wx.Panel(self.MainNotebook, wx.ID_ANY)
		self.ComboResolution = wx.ComboBox(self.TabFullscreenMode, wx.ID_ANY, choices=["Native", "640x480", "800x600", "1024x768", "1280x720", "1366x768", "1920x1080"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
		self.ComboBitDepth = wx.ComboBox(self.TabFullscreenMode, wx.ID_ANY, choices=["16 Bits", "24 Bits", "32 Bits"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
		self.ComboRefreshRate = wx.ComboBox(self.TabFullscreenMode, wx.ID_ANY, choices=["30 Hz", "45 Hz", "60 Hz", "75 Hz", "90 Hz", "120 Hz"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
		self.TabMainButtons = wx.Panel(self, wx.ID_ANY)
		self.ButtonQuit = wx.Button(self.TabMainButtons, wx.ID_ANY, "Quit")
		self.ButtonSave = wx.Button(self.TabMainButtons, wx.ID_ANY, "Save")
		self.ButtonPlay = wx.Button(self.TabMainButtons, wx.ID_ANY, "PLAY!")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_COMBOBOX, self.OnStereoModeChanged, self.ComboStereoMode)
		self.Bind(wx.EVT_RADIOBOX, self.OnVideoModeChanged, self.RadioVideoMode)
		self.Bind(wx.EVT_CHECKBOX, self.OnDisableMipmapChanged, self.CheckMipmap)
		self.Bind(wx.EVT_CHECKBOX, self.OnFixedTimeChanged, self.CheckFixedTime)
		self.Bind(wx.EVT_COMBOBOX, self.OnWindowSizeChanged, self.ComboWindowSize)
		self.Bind(wx.EVT_COMBOBOX, self.OnFullscreenResolutionChanged, self.ComboResolution)
		self.Bind(wx.EVT_COMBOBOX, self.OnBitDepthChanged, self.ComboBitDepth)
		self.Bind(wx.EVT_COMBOBOX, self.OnRefreshRateChanged, self.ComboRefreshRate)
		self.Bind(wx.EVT_BUTTON, self.OnClickQuit, self.ButtonQuit)
		self.Bind(wx.EVT_BUTTON, self.OnClickSave, self.ButtonSave)
		self.Bind(wx.EVT_BUTTON, self.OnClickPlay, self.ButtonPlay)
		# end wxGlade
		
		self.ComboStereoMode.SetSelection( Config['stereomode'] )
		self.RadioVideoMode.SetSelection( Config['videomode'] )
		self.CheckMipmap.SetValue( bool( Config['nomipmap'] ) )
		self.CheckFixedTime.SetValue( bool( Config['fixedtime'] ) )
		self.ComboWindowSize.SetSelection( Config['sizewindow'] )
		self.ComboResolution.SetSelection( Config['sizefullscreen'] )
		self.ComboBitDepth.SetSelection( Config['bitdepth'] )
		self.ComboRefreshRate.SetSelection( Config['refreshrate'] )

	def __set_properties(self):
		# begin wxGlade: MyFrame.__set_properties
		self.SetTitle("Configuration")
		self.ComboStereoMode.SetToolTip("3D Stereo Mode type. Usually, special hardware is needed to use this.")
		self.ComboStereoMode.SetSelection(0)
		self.RadioVideoMode.SetToolTip("If run the game in a window or in fullscreen.")
		self.RadioVideoMode.SetSelection(0)
		self.CheckMipmap.SetToolTip("Mipmaps makes the textures smoother and also corrects some depth artifacts on them. Textures may be pixelated with it disabled.")
		self.CheckFixedTime.SetToolTip("If enable all game frames. Affects the framerate.")
		self.ComboWindowSize.SetToolTip("Desired window size. The window also can be resized while the game is running.")
		self.ComboWindowSize.SetSelection(1)
		self.ComboResolution.SetMinSize((115, 22))
		self.ComboResolution.SetToolTip("Desired game resolution. Native is the current resolution of desktop.")
		self.ComboResolution.SetSelection(0)
		self.ComboBitDepth.SetToolTip("Fullscreen color depth (in bits).")
		self.ComboBitDepth.SetSelection(2)
		self.ComboRefreshRate.SetToolTip("Average framerate to keep in the game.")
		self.ComboRefreshRate.SetSelection(2)
		self.ButtonQuit.SetToolTip("Quit the configuration utility. Unsaved changes will be lost.")
		self.ButtonSave.SetToolTip("Save the current changes.")
		self.ButtonPlay.SetFont(wx.Font(9, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
		self.ButtonPlay.SetToolTip("Runs the game with the specified settings. It doesn't save changes (use Save instead).")
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyFrame.__do_layout
		MainSizer = wx.BoxSizer(wx.VERTICAL)
		SizerMainButtons = wx.BoxSizer(wx.HORIZONTAL)
		SizerFullscreenMode = wx.BoxSizer(wx.VERTICAL)
		SizerWindowMode = wx.BoxSizer(wx.VERTICAL)
		SizerTabGeneral = wx.BoxSizer(wx.VERTICAL)
		SizerGeneralChecks = wx.BoxSizer(wx.HORIZONTAL)
		LabelStereoMode = wx.StaticText(self.TabGeneral, wx.ID_ANY, "Stereo Mode (3D)")
		SizerTabGeneral.Add(LabelStereoMode, 0, wx.ALIGN_CENTER | wx.ALL, 5)
		SizerTabGeneral.Add(self.ComboStereoMode, 0, wx.ALIGN_CENTER, 0)
		SizerTabGeneral.Add(self.RadioVideoMode, 0, wx.ALIGN_CENTER | wx.ALL, 5)
		StaticGeneral = wx.StaticLine(self.TabGeneral, wx.ID_ANY)
		SizerTabGeneral.Add(StaticGeneral, 0, wx.ALL | wx.EXPAND, 5)
		SizerGeneralChecks.Add(self.CheckMipmap, 0, wx.ALIGN_CENTER | wx.ALL, 5)
		SizerGeneralChecks.Add(self.CheckFixedTime, 0, wx.ALIGN_CENTER | wx.ALL, 5)
		SizerTabGeneral.Add(SizerGeneralChecks, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
		self.TabGeneral.SetSizer(SizerTabGeneral)
		LabelWindowSize = wx.StaticText(self.TabWindowMode, wx.ID_ANY, "Window Size")
		SizerWindowMode.Add(LabelWindowSize, 0, wx.ALIGN_CENTER | wx.ALL, 0)
		SizerWindowMode.Add(self.ComboWindowSize, 0, wx.ALIGN_CENTER | wx.ALL, 5)
		self.TabWindowMode.SetSizer(SizerWindowMode)
		LabelResolution = wx.StaticText(self.TabFullscreenMode, wx.ID_ANY, "Resolution")
		SizerFullscreenMode.Add(LabelResolution, 0, wx.ALIGN_CENTER, 0)
		SizerFullscreenMode.Add(self.ComboResolution, 0, wx.ALIGN_CENTER | wx.ALL, 5)
		LabelBitDepth = wx.StaticText(self.TabFullscreenMode, wx.ID_ANY, "Bit Depth")
		SizerFullscreenMode.Add(LabelBitDepth, 0, wx.ALIGN_CENTER, 0)
		SizerFullscreenMode.Add(self.ComboBitDepth, 0, wx.ALIGN_CENTER | wx.ALL, 5)
		LabelRefreshRate = wx.StaticText(self.TabFullscreenMode, wx.ID_ANY, "Refresh Rate")
		SizerFullscreenMode.Add(LabelRefreshRate, 0, wx.ALIGN_CENTER, 0)
		SizerFullscreenMode.Add(self.ComboRefreshRate, 0, wx.ALIGN_CENTER | wx.ALL, 5)
		self.TabFullscreenMode.SetSizer(SizerFullscreenMode)
		self.MainNotebook.AddPage(self.TabGeneral, "General")
		self.MainNotebook.AddPage(self.TabWindowMode, "Window Mode")
		self.MainNotebook.AddPage(self.TabFullscreenMode, "Fullscreen Mode")
		MainSizer.Add(self.MainNotebook, 0, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 0)
		SizerMainButtons.Add(self.ButtonQuit, 0, wx.EXPAND, 0)
		SizerMainButtons.Add(self.ButtonSave, 0, wx.EXPAND, 0)
		SizerMainButtons.Add(self.ButtonPlay, 0, wx.ALL | wx.EXPAND, 0)
		self.TabMainButtons.SetSizer(SizerMainButtons)
		MainSizer.Add(self.TabMainButtons, 0, wx.EXPAND, 0)
		StaticOther = wx.StaticLine(self, wx.ID_ANY)
		MainSizer.Add(StaticOther, 0, wx.EXPAND, 0)
		self.SetSizer(MainSizer)
		MainSizer.Fit(self)
		self.Layout()
		self.Centre()
		# end wxGlade

	def OnClickQuit(self, event):  # wxGlade: MyFrame.<event_handler>
		pprint( 'Quit configuration utility' )
		self.Destroy()
		
	def OnStereoModeChanged(self, event):  # wxGlade: MyFrame.<event_handler>
		Config['stereomode'] = self.ComboStereoMode.GetSelection()
		pprint('Stereo Mode set to ' + str(Config['stereomode']))
		
	def OnVideoModeChanged(self, event):  # wxGlade: MyFrame.<event_handler>
		Config['videomode'] = self.RadioVideoMode.GetSelection()
		pprint('Video Mode set to ' + str(Config['videomode']))
		
	def OnDisableMipmapChanged(self, event):  # wxGlade: MyFrame.<event_handler>
		Config['nomipmap'] = int(self.CheckMipmap.GetValue())
		pprint('Disable mipmaps set to ' + str(Config['nomipmap']))
		
	def OnFixedTimeChanged(self, event):  # wxGlade: MyFrame.<event_handler>
		Config['fixedtime'] = int(self.CheckFixedTime.GetValue())
		pprint('Fixed time set to ' + str(Config['fixedtime']))
		
	def OnWindowSizeChanged(self, event):  # wxGlade: MyFrame.<event_handler>
		Config['sizewindow'] = self.ComboWindowSize.GetSelection()
		pprint('Window Size set to ' + str(Config['sizewindow']))
		
	def OnFullscreenResolutionChanged(self, event):  # wxGlade: MyFrame.<event_handler>
		Config['sizefullscreen'] = self.ComboResolution.GetSelection()
		pprint('Fullscreen resolution set to ' + str(Config['sizefullscreen']))
		
	def OnBitDepthChanged(self, event):  # wxGlade: MyFrame.<event_handler>
		Config['bitdepth'] = self.ComboBitDepth.GetSelection()
		pprint('Bit depth set to ' + str(Config['bitdepth']))
		
	def OnRefreshRateChanged(self, event):  # wxGlade: MyFrame.<event_handler>
		Config['refreshrate'] = self.ComboRefreshRate.GetSelection()
		pprint('Refresh rate set to ' + str(Config['refreshrate']))
		
	def OnClickSave(self, event):  # wxGlade: MyFrame.<event_handler>
		
		try:
			with open('Settings.cfg', 'w') as openedfile:
				
				openedfile.write( pformat( Config ) )
				pprint( 'Settings saved to ' + openedfile.name )
				
		except:
			pprint( 'Couldnt save settings to Settings.cfg' )
		
	def OnClickPlay(self, event):  # wxGlade: MyFrame.<event_handler>
		
		pathplayer = pathlib2.Path( Config['pathplayer'] ).resolve()
		pathfile = pathlib2.Path( Config['pathfile'] ).resolve()
		
		command = ''
		
		if pathplayer.exists() and pathfile.exists():
			
			command += '"' + str(pathplayer.as_posix()) + '" '
			
			if Config['videomode'] == 0:
				command += '-w '+ str(sizes_window[Config['sizewindow']][0]) + ' ' + str(sizes_window[Config['sizewindow']][1]) + ' 0 0 '
			
			if Config['videomode'] == 1:
				command += '-f ' + str(sizes_fullscreen[Config['sizefullscreen']][0]) + ' ' + str(sizes_fullscreen[Config['sizefullscreen']][1]) + ' ' + str(bit_depths[Config['bitdepth']]) + ' ' + str(refresh_rates[Config['refreshrate']]) + ' '
				
			command += '-s ' + str(stereo_modes[Config['stereomode']]) + ' '
			
			command += '-g fixedtime=' + str(Config['fixedtime']) + ' '
			
			command += '"' + str(pathfile.as_posix()) + '"'
			
			pprint('Running game under the following command: ')
			pprint(command)
			
			subprocess.call(command)
			
			self.Destroy()
		
# end of class MyFrame

class MyApp(wx.App):
	def OnInit(self):
		self.frame = MyFrame(None, wx.ID_ANY, "")
		self.SetTopWindow(self.frame)
		self.frame.Show()
		return True

# end of class MyApp

if __name__ == "__main__":
	Configuration = MyApp(0)
	Configuration.MainLoop()
